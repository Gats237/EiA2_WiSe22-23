 //Random Numbers
    
    function GetRandomFloat(min: number, max:number):number{
        return Math.random()*(max-min) + min;

    }

    function GetRandomInt(min: number, max:number):number{
        return Math.random()*(GetRandomFloat(min,max))

    }


    function FromPolar(v:number, theta:number):number{
        return [v+Math.cos(theta), v*Math.sin(theta)] 
    }


    interface ISimObject {
        Update():void;
        Draw(crc2: CanvasRenderingContext2D):void{
            crc2.save()

            crc2.restore()
        };
    }


    class Simulation implements ISimObject{
        constructor(private width:number, private height: number){}
        Update(): void {
        }
        Draw(crc2: CanvasRenderingContext2D): void {
            crc2.fillStyle = "red";
            crc2.fillRect(0,0, this.width, this.height)
        }
    }

    let MaxParticleSize=3;

    class Particle implements ISimObject{
        x=0; y=0; 
        speed=0; theta=0;

        radius= 1.0
        ttl= 500;
        duration=500;

        color="black";
        constructor(private w:number, private h: number){}
            this.x= GetRandomFloat(0,w);
            this.y= GetRandomFloat(0,h);

        this,speed = GetRandomFloat(0, 3.0);
        this.theat = GetRandomFloat (0,2*Math.PI)

        this.radius=GetRandomFloat (0.05, MaxParticleSize)
        this.lifetime= this.ttl= GetRandomInt(25,50)
        }

    }

    let ParticleCouunt= 200;

    class Simulation implements ISimObject{

    }

   

 function handleLoad(_event: Event): void {


    let height: number= window.innerHeight;
    let width: number= window.innerWidth;
    let canvas: HTMLCanvasElement = document.querySelector("canvas");
    let crc2: CanvasRenderingContext2D = canvas.getContext("2d");
    let updateFrameRate: number= 50;
    let renderFrameRate: number=50;

    
    crc2.imageSmoothingEnabled= true;
    crc2.imageSmoothingQuality="high";

    let sim= newSimulation(width, heigth);

    setInterval(
        ()=> {sim.Update()},
        1000/updateFrameRate);


     setInterval(
            ()=> {sim.Draw(crc2)},
            1000/renderFrameRate);
    




 }
